I"r<p>IT WORKS.
IT WORKS OH MY GOD.</p>

<p>Okay so the robot will now relatively accurately follow a target with reflective tape. Below is a video of the result.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/62tZ0-axoKE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>Pretty cool right? How does it work?
There are a total of three commands that we are using. They are listed as follows.</p>
<ul>
  <li>TrackLimelightTurn</li>
  <li>TrackLimelightDistance</li>
  <li>TrackLimelightFollow</li>
</ul>

<p>That’s quite a few commands. But in reality, the only command we’re running is TrackLimelightFollow. The hierarchy of commands looks a little something like this.</p>
<ul>
  <li>TrackLimelightFollow
    <ul>
      <li>TrackLimelightTurn</li>
      <li>TrackLimelightDistance</li>
    </ul>
  </li>
</ul>

<p>Let’s start from the lowest level: TrackLimelightTurn and TrackLimelightDistance.</p>

<h3 id="tracklimelightturn">TrackLimelightTurn</h3>
<p>TrackLimelightTurn is a PID command that turns the robot based on the X Offset. This X Offset is taken from the limelight, which publishes the X Offset it calculates to a network table (entry “tx”).</p>

<p><code class="highlighter-rouge">NetworkTableInstance.getDefault().getTable("limelight-hounds").getEntry("tx").getDouble(0);</code></p>

<p>After getting that X Offset, we use that as the measurement for the PID command and have the robot optimize itself so that tx reaches 0. In this way, the robot can turn to the target. The following are the PID values that we eventually got after tuning.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>P = 0.1
I = 0.000125
D = 0.02175
</code></pre></div></div>

<h3 id="tracklimelightdistance">TrackLimelightDistance</h3>
<p>TrackLimelightDistance</p>
:ET